name: CI Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  ARTIFACT_RETENTION_DAYS: 30

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===== JOB 1: VALIDATION =====
  validate:
    name: 🔍 Code Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Restore dependencies
        run: dotnet restore --verbosity minimal

      - name: 🔍 Code formatting check
        run: dotnet format --verify-no-changes --verbosity diagnostic

      - name: 📋 EditorConfig validation
        run: |
          echo "Checking .editorconfig compliance..."
          set -euo pipefail
          # List only tracked C# source files (excludes obj/, bin/, generated artifacts)
          cs_files="$(git ls-files '*.cs')"
          if [ -z "$cs_files" ]; then
            echo "No C# files found"
            exit 0
          fi

          echo "🔎 Verifying file encodings (accept UTF-8 and US-ASCII subset)..."
          bad_encoding=$(echo "$cs_files" | xargs -I{} file -i {} | grep -viE 'charset=(utf-8|us-ascii)' || true)
          if [ -n "$bad_encoding" ]; then
            echo "❌ Non UTF-8 encodings detected:" >&2
            echo "$bad_encoding" >&2
            exit 1
          else
            echo "✅ All files are UTF-8 (or ASCII subset)"
          fi

          echo "🔎 Checking for CRLF line endings..."
          crlf_files=$(echo "$cs_files" | xargs grep -Il $'\r' || true)
          if [ -n "$crlf_files" ]; then
            echo "❌ Files with CRLF line endings detected:" >&2
            echo "$crlf_files" | sed 's/^/ - /' >&2
            exit 1
          else
            echo "✅ No CRLF line endings found"
          fi

      - name: 🏗️ Build solution
        run: dotnet build --no-restore --configuration Release --verbosity minimal

      - name: 📊 Code analysis
        run: dotnet build --no-restore --configuration Release --verbosity normal --property WarningsAsErrors=""

  # ===== JOB 2: TESTS =====
  test:
    name: 🧪 Tests & Coverage
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 20

    strategy:
      matrix:
        test-group:
          - name: "Unit Tests"
            projects: "tests/**/*.csproj"
            filter: "Category!=Integration&Category!=Performance"
          - name: "Integration Tests"
            projects: "tests/**/*.csproj"
            filter: "Category=Integration"

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Restore dependencies
        run: dotnet restore --verbosity minimal

      - name: 🏗️ Build for testing
        run: dotnet build --no-restore --configuration Debug

      - name: 🧪 Run ${{ matrix.test-group.name }}
        run: |
          set -euo pipefail
          mkdir -p test-results
          # Enumerate test project files explicitly (avoid shell glob expansion limits)
          mapfile -t projects < <(find tests -type f -name '*.csproj' -print | sort)
          if [ ${#projects[@]} -eq 0 ]; then
            echo "No test projects found" >&2
            exit 1
          fi
          echo "Discovered test projects:"; printf ' - %s\n' "${projects[@]}"
          fail=0
          testGroupName="${{ matrix.test-group.name }}"
          testGroupFileSafe=$(echo "$testGroupName" | tr ' ' '-' | tr -cd 'A-Za-z0-9_-')
          for proj in "${projects[@]}"; do
            base=$(basename "$proj" .csproj)
            echo "\n=== Running tests for $proj ($testGroupName) ==="
            if ! dotnet test "$proj" \
              --no-build \
              --configuration Debug \
              --logger "trx;LogFileName=${base}-${testGroupFileSafe}.trx" \
              --logger "console;verbosity=minimal" \
              --collect:"XPlat Code Coverage" \
              --results-directory ./test-results \
              --filter "${{ matrix.test-group.filter }}" \
              -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover; then
              echo "❌ Tests failed in $proj" >&2
              fail=1
            fi
          done
          exit $fail

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
            name: test-results-${{ matrix.test-group.name }}
            path: ./test-results/
            retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: 📈 Code coverage summary
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:"./test-results/**/coverage.opencover.xml" \
            -targetdir:"./coverage-report" \
            -reporttypes:"Html;TextSummary" \
            -verbosity:Warning
          cat ./coverage-report/Summary.txt

      - name: 📤 Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.test-group.name }}
          path: ./coverage-report/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # ===== JOB 3: SECURITY SCAN =====
  security:
    name: 🔐 Security Analysis
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 10

    permissions:
      contents: read
      security-events: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Restore dependencies
        run: dotnet restore

      - name: 🔍 Security audit
        run: dotnet list package --vulnerable --include-transitive || true

      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: csharp

      - name: 🏗️ Build for CodeQL
        run: dotnet build --configuration Release

      - name: 🛡️ Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ===== JOB 4: PACKAGE BUILD =====
  package:
    name: 📦 Package Build
    runs-on: ubuntu-latest
    needs: [test, security]
    timeout-minutes: 15
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📝 Generate version
        id: version
        run: |
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            VERSION="1.0.${{ github.run_number }}"
          else
            VERSION="1.0.${{ github.run_number }}-dev"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: 📦 Restore dependencies
        run: dotnet restore

      - name: 🏗️ Build packages
        run: |
          dotnet pack src/NSI.Core/NSI.Core.csproj \
            --configuration Release \
            --no-restore \
            --output ./packages \
            -p:PackageVersion=${{ steps.version.outputs.version }} \
            -p:RepositoryUrl=${{ github.server_url }}/${{ github.repository }} \
            -p:RepositoryCommit=${{ github.sha }}

          dotnet pack src/NSI.Domains/NSI.Domains.csproj \
            --configuration Release \
            --no-restore \
            --output ./packages \
            -p:PackageVersion=${{ steps.version.outputs.version }} \
            -p:RepositoryUrl=${{ github.server_url }}/${{ github.repository }} \
            -p:RepositoryCommit=${{ github.sha }}

          dotnet pack src/NSI.AspNetCore/NSI.AspNetCore.csproj \
            --configuration Release \
            --no-restore \
            --output ./packages \
            -p:PackageVersion=${{ steps.version.outputs.version }} \
            -p:RepositoryUrl=${{ github.server_url }}/${{ github.repository }} \
            -p:RepositoryCommit=${{ github.sha }}

          dotnet pack src/NSI.EntityFramework/NSI.EntityFramework.csproj \
            --configuration Release \
            --no-restore \
            --output ./packages \
            -p:PackageVersion=${{ steps.version.outputs.version }} \
            -p:RepositoryUrl=${{ github.server_url }}/${{ github.repository }} \
            -p:RepositoryCommit=${{ github.sha }}

          dotnet pack src/NSI.Json/NSI.Json.csproj \
            --configuration Release \
            --no-restore \
            --output ./packages \
            -p:PackageVersion=${{ steps.version.outputs.version }} \
            -p:RepositoryUrl=${{ github.server_url }}/${{ github.repository }} \
            -p:RepositoryCommit=${{ github.sha }}

          dotnet pack src/NSI.Testing/NSI.Testing.csproj \
            --configuration Release \
            --no-restore \
            --output ./packages \
            -p:PackageVersion=${{ steps.version.outputs.version }} \
            -p:RepositoryUrl=${{ github.server_url }}/${{ github.repository }} \
            -p:RepositoryCommit=${{ github.sha }}
      - name: 📤 Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-${{ steps.version.outputs.version }}
          path: ./packages/*.nupkg
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # ===== JOB 5: BENCHMARKS =====
  benchmarks:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Restore dependencies
        run: dotnet restore

      - name: 🏗️ Build benchmarks
        run: dotnet build benchmarks/NSI.Testing.Benchmarks/NSI.Testing.Benchmarks.csproj --configuration Release

      - name: ⚡ Run benchmarks
        run: |
          cd benchmarks/NSI.Testing.Benchmarks
          if dotnet run --configuration Release --no-build > benchmark-results.txt 2>&1; then
            echo "Benchmarks completed successfully"
          else
            code=$?
            echo "Benchmark execution exited with code $code (continuing pipeline)." >&2
          fi

      - name: 📤 Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.run_number }}
          path: benchmarks/NSI.Testing.Benchmarks/benchmark-results.txt
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # ===== JOB 6: QUALITY GATE =====
  quality-gate:
    name: 🎯 Quality Gate
    runs-on: ubuntu-latest
    needs: [validate, test, security, package]
    if: always()
    timeout-minutes: 5

    steps:
      - name: 📥 Checkout code (for summary context)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 📊 Check quality requirements
        run: |
          echo "Checking CI results..."

          # Check if tests passed
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Tests failed"
            exit 1
          fi

          # Check if security scan passed
          if [ "${{ needs.security.result }}" != "success" ]; then
            echo "❌ Security scan failed"
            exit 1
          fi

          # Check if package build passed (only for master/develop)
          if [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            if [ "${{ needs.package.result }}" != "success" ]; then
              echo "❌ Package build failed"
              exit 1
            fi
          fi

          echo "✅ All quality checks passed!"

      - name: 📋 Summary
        run: |
          echo "## 🎉 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Validation | ${{ needs.validate.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.ref }}" = "refs/heads/master" ] || [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "| Package Build | ${{ needs.package.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Version | ${{ needs.package.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          fi
        