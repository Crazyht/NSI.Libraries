root=false

#######################################################
## C# specific rules (.cs files)
#######################################################
[*.cs]
#######################################################
## Specific rules
#######################################################

## Relaxed analyzer severities for test code (performance/diagnostic flexibility)
dotnet_diagnostic.S1215.severity = none   ## Allow controlled GC.Collect in perf/memory tests
dotnet_diagnostic.S2925.severity = none   ## Allow Thread.Sleep for timing/contention scenarios
dotnet_diagnostic.S6507.severity = none   ## Allow locking on locals in specific concurrency tests
dotnet_diagnostic.S3928.severity = none   ## Allow custom argument names in negative test cases

#######################################################
## Microsoft.CodeAnalysis.NetAnalyzers
#######################################################
## CA1040 : Avoid empty interfaces (category : Design / default: warning)
## Interfaces define members that provide a behavior or usage contract. The functionality that is described by the interface can be adopted by any type, regardless of where the type appears in the inheritance hierarchy. A type implements an interface by providing implementations for the members of the interface. An empty interface does not define any members; therefore, it does not define a contract that can be implemented.
dotnet_diagnostic.CA1040.severity = none ## Redundante with S4023
## CA2007 : Consider calling ConfigureAwait on the awaited task (category : Reliability / default: warning)
## When an asynchronous method awaits a Task directly, continuation occurs in the same thread that created the task. Consider calling Task.ConfigureAwait(Boolean) to signal your intention for continuation. Call ConfigureAwait(false) on the task to schedule continuations to the thread pool, thereby avoiding a deadlock on the UI thread. Passing false is a good option for app-independent libraries. Calling ConfigureAwait(true) on the task has the same behavior as not explicitly calling ConfigureAwait. By explicitly calling this method, you're letting readers know you intentionally want to perform the continuation on the original synchronization context.
dotnet_diagnostic.CA2007.severity = none ## ASP.NET Core don't have Synchronization context so using ConfigureAwait don't make sense.
## CA1707 : Identifiers should not contain underscores (category : Naming / default: none)
## By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.
dotnet_diagnostic.CA1707.severity = none ## Useless, define more fine grained rules in naming conventions.
## CA1707 : Identifiers should not contain underscores (category : Naming / default: none)
## By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.
dotnet_diagnostic.CA1707.severity = none ## Useless, define more fine grained rules in naming conventions.
## CA1707 : Identifiers should not contain underscores (category : Naming / default: none)
## By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.
dotnet_diagnostic.CA1707.severity = none ## Useless, define more fine grained rules in naming conventions.
## CA1707 : Identifiers should not contain underscores (category : Naming / default: none)
## By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.
dotnet_diagnostic.CA1707.severity = none ## Useless, define more fine grained rules in naming conventions.
## CA1707 : Identifiers should not contain underscores (category : Naming / default: none)
## By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.
dotnet_diagnostic.CA1707.severity = none ## Useless, define more fine grained rules in naming conventions.
## CA1707 : Identifiers should not contain underscores (category : Naming / default: none)
## By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.
dotnet_diagnostic.CA1707.severity = none ## Useless, define more fine grained rules in naming conventions.
## CA1707 : Identifiers should not contain underscores (category : Naming / default: none)
## By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.
dotnet_diagnostic.CA1707.severity = none ## Useless, define more fine grained rules in naming conventions.
## CA1707 : Identifiers should not contain underscores (category : Naming / default: none)
## By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.
dotnet_diagnostic.CA1707.severity = none ## Useless, define more fine grained rules in naming conventions.
## CA1014 : Mark assemblies with CLSCompliant (category : Design / default: warning)
## The Common Language Specification (CLS) defines naming restrictions, data types, and rules to which assemblies must conform if they will be used across programming languages. Good design dictates that all assemblies explicitly indicate CLS compliance by using CLSCompliantAttribute . If this attribute is not present on an assembly, the assembly is not compliant.
dotnet_diagnostic.CA1014.severity = none
## CA1034 : Nested types should not be visible (category : Design / default: warning)
## A nested type is a type that is declared in the scope of another type. Nested types are useful to encapsulate private implementation details of the containing type. Used for this purpose, nested types should not be externally visible.
dotnet_diagnostic.CA1034.severity = suggestion ## Visible neested type can be usefull (Constant organization for exemple).
## CA1034 : Nested types should not be visible (category : Design / default: warning)
## A nested type is a type that is declared in the scope of another type. Nested types are useful to encapsulate private implementation details of the containing type. Used for this purpose, nested types should not be externally visible.
dotnet_diagnostic.CA1034.severity = suggestion ## Visible neested type can be usefull (Constant organization for exemple).
## CA1056 : URI-like properties should not be strings (category : Design / default: warning)
## This rule assumes that the property represents a Uniform Resource Identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The System.Uri class provides these services in a safe and secure manner.
dotnet_diagnostic.CA1056.severity = none ## Redundante with S4005
## CA1024 : Use properties where appropriate (category : Design / default: warning)
## A public or protected method has a name that starts with ""Get"", takes no parameters, and returns a value that is not an array. The method might be a good candidate to become a property.
dotnet_diagnostic.CA1024.severity = none ## Redundante with S4049
## CA1062 : Validate arguments of public methods (category : Design / default: warning)
## An externally visible method dereferences one of its reference arguments without verifying whether that argument is 'null' ('Nothing' in Visual Basic). All reference arguments that are passed to externally visible methods should be checked against 'null'. If appropriate, throw an 'ArgumentNullException' when the argument is 'null'. If the method is designed to be called only by known assemblies, you should make the method internal.
dotnet_diagnostic.CA1062.severity = warning ## Lot of false positive with not nullable object.
## CA1308 : Normalize strings to uppercase (category : Globalization / default: warning)
## Strings should be normalized to uppercase. A small group of characters cannot make a round trip when they are converted to lowercase. To make a round trip means to convert the characters from one locale to another locale that represents character data differently, and then to accurately retrieve the original characters from the converted characters.
dotnet_diagnostic.CA1308.severity = none ## Not relevant.

# CA1031: Do not catch general exception types
dotnet_diagnostic.CA1031.severity = none
# CA1812: Avoid uninstantiated internal classes
dotnet_diagnostic.CA1812.severity = none
# S1144: Unused private types or members should be removed
dotnet_diagnostic.S1144.severity = none
# CA1515: Consider making public types internal
dotnet_diagnostic.CA1515.severity = none
